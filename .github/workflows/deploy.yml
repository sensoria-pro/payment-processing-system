# Triggers: run on push to the main branch and on Pull Request in main
name: Main CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # --- JOB 1: Build and Test ---
  # This job is the core job. It tests the code and builds Docker images.
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code # 1. Download the source code of the repository
        uses: actions/checkout@v5

      - name: Set up Go # 2. Setting up the Go environment
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'

      - name: Run Linter (golangci-lint) # 3. Run the linter (code style check)
        uses: golangci/golangci-lint-action@v8


      - name: Run Tests # 4. Run tests
        run: go test -race -coverprofile=coverage.txt -covermode=atomic ./...


      - name: Login to Docker Hub # 5. Login to Docker Hub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 6. Build and publish the payment-gateway image
      - name: Build and push payment-gateway
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }} # push=true only for main
          tags: tonygilman/payment-gateway:latest
          build-args: |
            SERVICE_PATH=./cmd/main.go
          env:
            SERVICE_NAME=payment-gateway
      
      - name: Build and push anti-fraud-analyzer
        uses: docker/build-push-action@v6
        with:
            context: .
            file: Dockerfile
            push: true
            tags: tonygilman/anti-fraud-analyzer:latest
            build-args: |
              SERVICE_PATH=./cmd/anti-fraud-analyzer/main.go
            env:
              SERVICE_NAME=anti-fraud-analyzer
  
      - name: Build and push alerter-service
        uses: docker/build-push-action@v6
        with:
            context: .
            file: Dockerfile
            push: true
            tags: tonygilman/alerter-service:latest
            build-args: |
              SERVICE_PATH=./cmd/alerter-service/main.go
            env:
              SERVICE_NAME=alerter-service  

      - name: Build and push ch-query-tool
        uses: docker/build-push-action@v6
        with:
            context: .
            file: Dockerfile
            push: true
            tags: tonygilman/ch-query-tool:latest
            build-args: |
             SERVICE_PATH=./cmd/ch-query-tool/main.go
            env:
              SERVICE_NAME=ch-query-tool 
              
      - name: Build and push dlq-tool
        uses: docker/build-push-action@v6
        with:
            context: .
            file: Dockerfile
            push: true
            tags: tonygilman/dlq-tool:latest
            build-args: |
              SERVICE_NAME=dlq-tool
              SERVICE_PATH=./cmd/dlq-tool/main.go        
  
      - name: Build and push log-streamer
        uses: docker/build-push-action@v6
        with:
            context: .
            file: Dockerfile
            push: true
            tags: tonygilman/log-streamer:latest
            build-args: |
              SERVICE_NAME=log-streamer
              SERVICE_PATH=./cmd/log-streamer/main.go 
              
      - name: Build and push txn-generator
        uses: docker/build-push-action@v6
        with:
            context: .
            file: Dockerfile
            push: true
            tags: tonygilman/txn-generator:latest
            build-args: |
              SERVICE_NAME=txn-generator
              SERVICE_PATH=./cmd/txn-generator/main.go

      - name: Build and push service-doctor
        uses: docker/build-push-action@v6
        with:
            context: .
            file: Dockerfile
            push: true
            tags: tonygilman/service-doctor:latest
            build-args: |
              SERVICE_NAME=service-doctor
              SERVICE_PATH=./cmd/service-doctor/main.go   

  # --- JOB 2: Security Scan ---
  # This job runs in parallel with build-and-test to save time.
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Dependency Review  # 1. Check dependencies at all
        if: github.event_name == 'pull_request'
        uses: actions/dependency-review-action@v4

      - name: Build image for scan # 2. Scanning Docker images for vulnerabilities
        run: |
          docker build \
            --build-arg SERVICE_NAME=payment-gateway \
            --build-arg SERVICE_PATH=./cmd/main.go \
            -t temp-gateway-image -f ./Dockerfile .

      - name: Scan image with Trivy # 3. Scanning Docker images for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'temp-gateway-image'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'HIGH,CRITICAL'

  # --- JOB 3: Deploy ---
  # This job is only run after 'build-and-test' has completed successfully
  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]  # Wait for build-and-test and security-scan to complete
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Deploy to Production Server
        uses: appleboy/ssh-action@v1.2.2 # 1. Deploy to Production Server
        with:
          host: ${{ secrets.PROD_SERVER_HOST }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          key: ${{ secrets.PROD_SERVER_SSH_KEY }}
          passphrase: ${{ secrets.PROD_SSH_PASSPHRASE }}
          script: |
            cd /opt/app
            
            # Create a .env file with secrets BEFORE launching
            echo "${{ secrets.PROD_ENV_FILE }}" > .env

            # Login to Docker Hub to download fresh images
            echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            
            # Download the latest versions of the images that we just published
            # Нужно учитывать версию на debian машине docker compose 2 версии использует (docker compose) а если 1 версия то (docker-compose)

            docker compose pull

            # Restart services. Docker Compose will recreate only those containers whose images have been updated.
            docker compose up -d