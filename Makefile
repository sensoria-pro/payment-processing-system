# Load variables from .env to use them in commands
ifneq (,$(wildcard .env))
    include .env
	export $(shell sed 's/=.*//' .env 2>/dev/null || echo "")	
endif

# Variables for connecting to the database (with fallback values)
POSTGRES_HOST ?= localhost
POSTGRES_PORT ?= 5432
POSTGRES_USER ?= postgres
POSTGRES_PASSWORD ?= password
POSTGRES_DB ?= payment_system
DB_SSL_MODE ?= disable

# Database connection string
DATABASE_URL = postgres://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@$(POSTGRES_HOST):$(POSTGRES_PORT)/$(POSTGRES_DB)?sslmode=$(DB_SSL_MODE)

# Path to migration
MIGRATIONS_PATH = migrations_postgres

.PHONY: help migrate-up migrate-down migrate-force migrate-version migrate-create

help: ## Show help
	@echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
	@echo "=================="
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' Makefile | sort | awk -F ':.*## ' '{printf "make %-20s - %s\n", $$1, $$2}'

migrate-up: ## Apply all migrations
	@if [ "$(POSTGRES_PASSWORD)" = "password" ]; then \
        echo "‚ùå –û–ø–∞—Å–Ω–æ—Å—Ç—å: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'password'"; \
        echo "üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ POSTGRES_PASSWORDD –≤ .env –∏–ª–∏ —á–µ—Ä–µ–∑ export"; \
        exit 1; \
    fi
    @echo "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π..."
    migrate -path $(MIGRATIONS_PATH) -database "$(DATABASE_URL)" up

migrate-down: ## Roll back all migrations
	@echo "–û—Ç–∫–∞—Ç –≤—Å–µ—Ö –º–∏–≥—Ä–∞—Ü–∏–π..."
	migrate -path $(MIGRATIONS_PATH) -database "$(DATABASE_URL)" down

migrate-force: ## Force migration version (use with caution)
	@echo "–£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä—Å–∏—é: make migrate-force VERSION=<–Ω–æ–º–µ—Ä_–≤–µ—Ä—Å–∏–∏>"
	@if [ -z "$(VERSION)" ]; then echo "–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≤–µ—Ä—Å–∏—è"; exit 1; fi
	migrate -path $(MIGRATIONS_PATH) -database "$(DATABASE_URL)" force $(VERSION)

migrate-version: ## Show the current migration version
	@echo "–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏:"
	migrate -path $(MIGRATIONS_PATH) -database "$(DATABASE_URL)" version

migrate-create: ## Create a new migration
	@echo "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –º–∏–≥—Ä–∞—Ü–∏–∏: make migrate-create NAME=<–∏–º—è_–º–∏–≥—Ä–∞—Ü–∏–∏>"
	@if [ -z "$(NAME)" ]; then echo "–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –º–∏–≥—Ä–∞—Ü–∏–∏"; exit 1; fi
	migrate create -ext sql -dir $(MIGRATIONS_PATH) -seq $(NAME).sql

migrate-status: ## Show migration status
	@echo "–°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π:"
	migrate -path $(MIGRATIONS_PATH) -database "$(DATABASE_URL)" version



# ----- Testing commands
test-migrate: ## Running tests with migrations
	@echo "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
	go test ./...

# ----- Production commands
prod-migrate: ## Applying Migrations in Production
    @echo "‚ö†Ô∏è  –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ!"
    @echo "‚ùó –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è!"
    @read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " -n 1 -r; echo
    @if [[ ! $$REPLY =~ ^[Yy]$$ ]]; then exit 1; fi
    $(MAKE) migrate-up

# ----- Commands for launching the application
run: ## Launching the application
	@echo "–ó–∞–ø—É—Å–∫ payment-processing-system..."
	./scripts/run.sh

run-dev: ## Running the application in development mode
	@echo "–ó–∞–ø—É—Å–∫ payment-processing-system –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
	$(MAKE) dev-docker
	@echo "–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
	go run cmd/main.go

test-api: ## API Testing
	@echo "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API..."
	./scripts/test-api.sh

build: ## Building the application
	@echo "–°–±–æ—Ä–∫–∞ payment-processing-system..."
	go build -o bin/payment-processing-system cmd/main.go

# ------- Commands for Docker
docker-up: ## Start all Docker containers
	@echo "–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
	docker compose up -d
	@echo "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
	@sleep 10
	@echo "–í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã!"

docker-down: ## Stopping Docker containers
	@echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
	docker compose down

docker-logs: ## Viewing Docker container logs
	docker compose logs -f

docker-reset: ## Reset Docker containers and data
	@echo "–°–±—Ä–æ—Å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö..."
	docker compose down -v
	$(MAKE) docker-up

# ----- Commands for Docker Development
dev-docker: ## Complete environment setup with Docker
	@echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å Docker..."
	@if [ ! -f .env ]; then cp env.example .env; echo "–°–æ–∑–¥–∞–Ω .env —Ñ–∞–π–ª –∏–∑ –ø—Ä–∏–º–µ—Ä–∞"; fi
	$(MAKE) docker-up
	@echo "–û–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!"
	@echo "Payment-processing-system: http://localhost:$(APP_PORT)/health"
	@echo "pgAdmin: http://localhost:$(PGADMIN_PORT:-8082) ($(PGADMIN_EMAIL) / $(PGADMIN_PASSWORD))"
	@echo "Grafana: http://localhost:$(GRAFANA_PORT)"
	@echo "Prometheus: http://localhost:$(PROMETHEUS_PORT)"
	@echo "Jaeger: http://localhost:$(JAEGER_PORT)"

wait-for-db: ## Wait for PostgreSQL to be ready
    @echo "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL..."
    @until docker exec -i postgres-db pg_isready -U $(POSTGRES_USER) -d $(POSTGRES_DB); do \
        echo "‚è≥ PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∂–¥—ë–º..."; \
        sleep 2; \
    done
    @echo "‚úÖ PostgreSQL –≥–æ—Ç–æ–≤!"

# ------- Development commands
dev-setup: ## Setting up the development environment
    @echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
    @if [ ! -f .env ]; then cp env.example .env; echo "–°–æ–∑–¥–∞–Ω .env —Ñ–∞–π–ª –∏–∑ –ø—Ä–∏–º–µ—Ä–∞"; fi
    @echo "–ó–∞–ø—É—Å–∫ PostgreSQL..."
    $(MAKE) docker-up
    @echo "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL..."
    $(MAKE) wait-for-db
    @echo "–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    docker exec -i postgres-db createdb -U $(POSTGRES_USER) $(POSTGRES_DB) || echo "–ë–∞–∑–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    $(MAKE) migrate-up

dev-reset: ## Resetting the development database
	@echo "–°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
	dropdb $(POSTGRES_DB) 2>/dev/null || echo "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
	createdb $(POSTGRES_DB)
	$(MAKE) migrate-up

# ---- Commands for all services
build-alerter: ## Building alerter-service
	@echo "–°–±–æ—Ä–∫–∞ alerter-service..."
	go build -o bin/alerter-service cmd/alerter-service/main.go

run-alerter: ## Launch alerter-service
	@echo "–ó–∞–ø—É—Å–∫ alerter-service..."
	go run cmd/alerter-service/main.go	

build-antifraud: ## Building anti-fraud-analyzer
	@echo "–°–±–æ—Ä–∫–∞ anti-fraud-analyzer..."
	go build -o bin/anti-fraud-analyzer cmd/anti-fraud-analyzer/main.go

run-antifraud: ## Launch anti-fraud-analyzer
	@echo "–ó–∞–ø—É—Å–∫ anti-fraud-analyzer..."
	go run cmd/anti-fraud-analyzer/main.go

build-ch-query-tool: ## Building ch-query-tool
	@echo "–°–±–æ—Ä–∫–∞ ch-query-tool..."
	go build -o bin/ch-query-tool cmd/ch-query-tool/main.go

run-ch-query-tool: ## Launch ch-query-tool
	@echo "–ó–∞–ø—É—Å–∫ ch-query-tool..."
	go run cmd/ch-query-tool/main.go

build-dlq-tool: ## Building dlq-tool
	@echo "–°–±–æ—Ä–∫–∞ dlq-tool..."
	go build -o bin/dlq-tool cmd/dlq-tool/main.go

run-dlq-tool: ## Launch dlq-tool
	@echo "–ó–∞–ø—É—Å–∫ dlq-tool..."
	./bin/dlq-tool view --brokers=localhost:9092 --dlq-topic=transactions.created.dlq --limit=15

build-service-doctor: ## Building service-doctor
	@echo "–°–±–æ—Ä–∫–∞ service-doctor..."
	go build -o bin/service-doctor cmd/service-doctor/main.go

run-service-doctor: ## Launch service-doctor
	@echo "–ó–∞–ø—É—Å–∫ service-doctor..."
	go run cmd/service-doctor/main.go

build-txn-generator: ## Building txn-generator
	@echo "–°–±–æ—Ä–∫–∞ txn-generator..."
	go build -o bin/txn-generator cmd/txn-generator/main.go

run-txn-generator: ## Launch txn-generator
	@echo "–ó–∞–ø—É—Å–∫ txn-generator..."
	go run cmd/txn-generator/main.go			

build-all: build build-alerter build-antifraud build-ch-query-tool build-dlq-tool build-service-doctor build-txn-generator ## Building all services
	@echo "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Å–æ–±—Ä–∞–Ω—ã!"

# ---- Commands for a full system startup
start-all: ## Launching the entire system
	@echo "–ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã Payment-processing-system..."
	@if [ ! -f .env ]; then cp env.example .env; echo "–°–æ–∑–¥–∞–Ω .env —Ñ–∞–π–ª –∏–∑ –ø—Ä–∏–º–µ—Ä–∞"; fi
	docker compose up -d
	@echo "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
	@sleep 15
	@echo "–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!"
	@echo "Payment-processing-system: http://localhost:$(APP_PORT)/health"
	@echo "pgAdmin: http://localhost:$(PGADMIN_PORT:-8082) ($(PGADMIN_EMAIL) / $(PGADMIN_PASSWORD))"
	@echo "Grafana: http://localhost:$(GRAFANA_PORT)"
	@echo "Prometheus: http://localhost:$(PROMETHEUS_PORT)"
	@echo "Jaeger: http://localhost:$(JAEGER_PORT)"

stop-all: ## Stopping the entire system
	@echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã..."
	docker compose down

health-check: ## System Health Check
	@echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã..."
	./scripts/health-check.sh 
