version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: payment_gateway_db
    environment:
      POSTGRES_DB: payment_gateway
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: payment_gateway_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - '8082:80'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:80/misc/ping']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    ports:
      - '6379:6379'

  clickhouse:
    image: clickhouse/clickhouse-server:24.3
    ports:
      - '8123:8123' # HTTP
      - '9000:9000' # Native
    environment:
      CLICKHOUSE_DB: default
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: ''
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    volumes:
      - clickhouse_data:/var/lib/clickhouse

  # --- Migrants ---
  postgres-migrator:
    image: migrate/migrate
    volumes:
      - ./migrations_postgres:/migrations
    command:
      ['-path', '/migrations', '-database', 'postgres://postgres:password@postgres:5432/payment_gateway?sslmode=disable', 'up']
    depends_on:
      postgres:
        condition: service_healthy

  clickhouse-migrator:
    image: clickhouse/clickhouse-server:24.3
    volumes:
      - ./migrations_clickhouse:/migrations
    command: >
      clickhouse-client --host clickhouse --port 9000 --query "
      CREATE TABLE IF NOT EXISTS default.fraud_reports (
          transaction_id UUID,
          is_fraudulent  UInt8,
          reason         String,
          card_hash      String,
          amount         Float64,
          processed_at   DateTime
      ) ENGINE = MergeTree()
      ORDER BY (processed_at, transaction_id);"
    depends_on:
      clickhouse:
        condition: service_started

  # --- Message broker ---
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1

  prometheus:
    image: prom/prometheus:v2.53.0
    ports:
      - '9090:9090'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus_rules.yml:/etc/prometheus/rules/prometheus_rules.yml # File with rules for alerts
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - payment-gateway

  grafana:
    image: grafana/grafana-oss:11.1.0
    ports:
      - '3000:3000'
    depends_on:
      - prometheus

  jaeger:
    image: jaegertracing/all-in-one:1.57
    ports:
      - '16686:16686' # UI
      - '4317:4317' # gRPC Receiver for OpenTelemetry

  alertmanager:
    image: prom/alertmanager:v0.27.0
    ports:
      - '9093:9093'
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'

  alerter-service:
    build:
      context: .
      dockerfile: Dockerfile.alerter #TODO: Нужен отдельный Dockerfile для этого сервиса
    ports:
      - '8081:8080' # We use another external port to avoid conflicts
    environment:
      # Passing Secrets as Environment Variables
      # TELEGRAM_BOT_TOKEN: '${TELEGRAM_BOT_TOKEN}'
      # TELEGRAM_CHAT_ID: '${TELEGRAM_CHAT_ID}'

  # --- Microservices ---
  payment-gateway:
    build: . # Dockerfile must be in the root
    ports:
      - '8080:8080'
    environment:
      - POSTGRES_DSN=postgres://postgres:password@postgres:5432/payment_gateway?sslmode=disable
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_ADDR=redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
      redis:
        condition: service_started
      postgres-migrator:
        condition: service_completed_successfully

  anti-fraud-analyzer:
    build:
      context: .
      dockerfile: Dockerfile.antifraud # We use a separate Dockerfile
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - CLICKHOUSE_ADDR=clickhouse:9000
    depends_on:
      clickhouse:
        condition: service_started
      kafka:
        condition: service_started
      clickhouse-migrator:
        condition: service_completed_successfully

volumes:
  postgres_data:
  pgadmin_data:
  clickhouse_data:
