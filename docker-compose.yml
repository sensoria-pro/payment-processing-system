services:
  # --- Databases and Caches ---
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports: ['${POSTGRES_PORT:-5432}:5432']
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports: ['${REDIS_PORT:-6379}:6379']

  clickhouse:
    image: clickhouse/clickhouse-server:24.3
    ports:
      - '${CLICKHOUSE_HTTP_PORT:-8123}:8123' # HTTP
      - '${CLICKHOUSE_NATIVE_PORT:-9000}:9000' # Native
    environment:
      CLICKHOUSE_DB: ${CLICKHOUSE_DB}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: ${CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT}  
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "/dev/null", "http://localhost:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 5

# --- Message broker (Kafka without Zookeeper) ---
  kafka:
    image: confluentinc/cp-kafka:7.6.1
    ports:
      - '${KAFKA_PORT:-9092}:9092'
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://kafka:29092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_LISTENERS: 'PLAINTEXT_HOST://0.0.0.0:9092,PLAINTEXT://0.0.0.0:29092,CONTROLLER://kafka:29093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'

# --- Microservices ---
  payment-gateway:
    image: tonygilman/payment-gateway:latest
    # build:
    #   context: . # Dockerfile must be in the root
    #   dockerfile: Dockerfile
    #   args:
    #     SERVICE_NAME: payment-gateway
    #     SERVICE_PATH: ./cmd/main.go
    ports: ['${APP_PORT:-8080}:8080']
    env_file: [.env]
    depends_on: { postgres: { condition: service_healthy }, kafka: { condition: service_started }, redis: { condition: service_started }, postgres-migrator: { condition: service_completed_successfully } }

  anti-fraud-analyzer:
    image: tonygilman/anti-fraud-analyzer:latest
    # build:
    #   context: .
    #   dockerfile: Dockerfile
    #   args:
    #     SERVICE_NAME: anti-fraud-analyzer
    #     SERVICE_PATH: ./cmd/anti-fraud-analyzer/main.go
    env_file: [.env]
    depends_on: { clickhouse: { condition: service_healthy }, kafka: { condition: service_started }, clickhouse-migrator: { condition: service_completed_successfully }  }

  alerter-service:
    image: tonygilman/alerter-service:latest
    # build:
    #   context: .
    #   dockerfile: Dockerfile
    #   args:
    #     SERVICE_NAME: alerter-service
    #     SERVICE_PATH: ./cmd/alerter-service/main.go
    ports: ['${ALERTER_SERVICE_PORT:-8081}:8080']
    env_file: [.env]

# --- Tools
  # ... prometheus, grafana, jaeger, alertmanager, pgadmin ...
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: payment_gateway_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    ports:
      - '${PGADMIN_PORT}:80'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:80/misc/ping']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # --- Migrants ---
  postgres-migrator:
    image: migrate/migrate
    volumes:
      - ./migrations_postgres:/migrations
    command:
      ['-path', '/migrations', '-database', 'postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable', 'up']
    depends_on:
      postgres:
        condition: service_healthy

  clickhouse-migrator:
    image: clickhouse/clickhouse-server:24.3
    volumes:
      - ./migrations_clickhouse:/migrations
    command: >
      clickhouse-client --host clickhouse --port 9000 --query "
      CREATE TABLE IF NOT EXISTS default.fraud_reports (
          transaction_id UUID,
          is_fraudulent  UInt8,
          reason         String,
          card_hash      String,
          amount         Float64,
          processed_at   DateTime
      ) ENGINE = MergeTree()
      ORDER BY (processed_at, transaction_id);"
    depends_on:
      clickhouse:
        condition: service_started    

  prometheus:
    image: prom/prometheus:v2.53.0
    ports:
      - '${PROMETHEUS_PORT}:9090'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus_rules.yml:/etc/prometheus/rules/prometheus_rules.yml # File with rules for alerts
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - payment-gateway

  grafana:
    image: grafana/grafana-oss:11.1.0
    ports:
      - '${GRAFANA_PORT}:3000'
    depends_on:
      - prometheus

  jaeger:
    image: jaegertracing/all-in-one:1.57
    ports:
      - '${JAEGER_PORT}:16686' # UI
      - '${JAEGER_PORT_GRPC}:4317' # gRPC Receiver for OpenTelemetry

  alertmanager:
    image: prom/alertmanager:v0.27.0
    ports:
      - '${ALERTMANAGER_PORT}:9093'
    volumes:
      - './alertmanager.yml:/etc/alertmanager/alertmanager.yml'
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'        

volumes:
  postgres_data:
  pgadmin_data:
  clickhouse_data:
